{"version":3,"sources":["webpack:///src/app/register/register.component.html","webpack:///src/app/register/register.component.ts","webpack:///src/app/_services/auth.service.ts","webpack:///src/environments/environment.ts","webpack:///src/app/_services/token-storage.service.ts","webpack:///src/app/converter/currency.service.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/converter/converter.component.html","webpack:///src/app/converter/converter.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/_helpers/auth.interceptor.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["RegisterComponent","authService","form","isSuccessful","isSignUpFailed","errorMessage","register","subscribe","data","console","log","err","error","message","AuthService","http","apiServerUrl","apiBaseUrl","email","password","post","observe","user","environment","production","TOKEN_KEY","USER_KEY","TokenStorageService","window","sessionStorage","clear","token","removeItem","setItem","getItem","CurrencyService","get","currency","quantity","AppComponent","tokenStorageService","router","isLoggedIn","getToken","navigate","signOut","location","reload","ConverterComponent","currencyService","tokenStorage","show","showBtn","getAllCurrency","currencyForm","value","document","getElementById","textContent","toPln","fromPln","response","allCurrency$","alert","getValueToPln","code","currency$","result","getValueFromPln","AppModule","TOKEN_HEADER_KEY","AuthInterceptor","req","next","authReq","clone","headers","set","handle","authInterceptorProviders","provide","useClass","multi","routes","path","component","redirectTo","pathMatch","AppRoutingModule","forRoot","LoginComponent","username","isLoginFailed","header","login","resp","saveToken","reloadPage","bootstrapModule","webpackEmptyAsyncContext","Promise","resolve","then","e","Error","keys","module","exports","id"],"mappings":"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","file":"main-es5.js","sourcesContent":["<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <!-- Bootstrap CSS -->\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n        <!-- Javascript -->\n        <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\n        <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script>\n    </head>\n    <body>\n        <div class=\"col-md-12\">\n            <div class=\"card card-container\">\n              <form\n                *ngIf=\"!isSuccessful\"\n                name=\"form\"\n                (ngSubmit)=\"f.form.valid && onSubmit()\"\n                #f=\"ngForm\"\n                novalidate\n              >\n                <div class=\"form-group\">\n                  <label for=\"email\">Email</label>\n                  <input\n                    type=\"email\"\n                    class=\"form-control\"\n                    name=\"email\"\n                    [(ngModel)]=\"form.email\"\n                    required\n                    email\n                    #email=\"ngModel\"\n                  />\n                  <div class=\"alert-danger\" *ngIf=\"f.submitted && email.invalid\">\n                    <div *ngIf=\"email.errors.required\">Email is required</div>\n                    <div *ngIf=\"email.errors.email\">\n                      Email must be a valid email address\n                    </div>\n                  </div>\n                </div>\n                <div class=\"form-group\">\n                  <label for=\"password\">Password</label>\n                  <input\n                    type=\"password\"\n                    class=\"form-control\"\n                    name=\"password\"\n                    [(ngModel)]=\"form.password\"\n                    required\n                    minlength=\"4\"\n                    #password=\"ngModel\"\n                  />\n                  <div class=\"alert-danger\" *ngIf=\"f.submitted && password.invalid\">\n                    <div *ngIf=\"password.errors.required\">Password is required</div>\n                    <div *ngIf=\"password.errors.minlength\">\n                      Password must be at least 4 characters\n                    </div>\n                  </div>\n                </div>\n                <div class=\"form-group\">\n                  <button class=\"btn btn-primary btn-block\">Sign Up</button>\n                </div>\n          \n                <div class=\"alert alert-warning\" *ngIf=\"f.submitted && isSignUpFailed\">\n                  Signup failed!<br />{{ errorMessage }}\n                </div>\n              </form>\n          \n              <div class=\"alert alert-success\" *ngIf=\"isSuccessful\">\n                Your registration is successful!\n              </div>\n            </div>\n          </div>\n    </body>\n</html>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../_services/auth.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  form: any = {};\n  isSuccessful = false;\n  isSignUpFailed = false;\n  errorMessage = '';\n\n  constructor(private authService: AuthService) { }\n\n  ngOnInit(): void {}\n\n  onSubmit(): void {\n    this.authService.register(this.form).subscribe(\n      data => {\n        console.log(data);\n        this.isSuccessful = true;\n        this.isSignUpFailed = false;\n      },\n      err => {\n        this.errorMessage = err.error.message;\n        this.isSignUpFailed = true;\n      }\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Config } from 'protractor';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private apiServerUrl = environment.apiBaseUrl;\n\n  constructor(private http: HttpClient) { }\n\n  login(email: string, password: string): Observable<HttpResponse<Config>> {\n    return this.http.post<Config>(`${this.apiServerUrl}/login`, {\n      email,\n      password\n    }, {observe: 'response'});\n  }\n\n  register(user): Observable<any> {\n    return this.http.post(`${this.apiServerUrl}/register`, {\n      email: user.email,\n      password: user.password\n    });\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiBaseUrl: 'http://localhost:8080'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\n\nconst TOKEN_KEY = 'auth-token';\nconst USER_KEY = 'auth-user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TokenStorageService {\n  constructor() { }\n\n  signOut(): void {\n    window.sessionStorage.clear();\n  }\n\n  public saveToken(token: string): void {\n    window.sessionStorage.removeItem(TOKEN_KEY);\n    window.sessionStorage.setItem(TOKEN_KEY, token);\n  }\n\n  public getToken(): string | null {\n    return window.sessionStorage.getItem(TOKEN_KEY);\n  }\n}\n","import { HttpClient} from '@angular/common/http'\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Currency } from './currency';\nimport { AllCurrency } from './allCurrency';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CurrencyService {\n    private apiServerUrl = environment.apiBaseUrl;\n\n    constructor(private http: HttpClient) {}\n\n    public getAllCurrency(): Observable<AllCurrency[]> {\n        return this.http.get<AllCurrency[]>(`${this.apiServerUrl}/currency/all/`);\n    }\n\n    public getValueFromPln(currency: string, quantity: string): Observable<Currency> {\n        return this.http.get<Currency>(`${this.apiServerUrl}/currency/from/${currency}/${quantity}`);\n    }\n\n    public getValueToPln(currency: string, quantity: string): Observable<Currency> {\n        return this.http.get<Currency>(`${this.apiServerUrl}/currency/to/${currency}/${quantity}`);\n    }\n}","<html>\n  <head>\n    meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <!-- Bootstrap CSS -->\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n  <!-- Javascript -->\n  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\n  <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script>\n  </head>\n\n  <body>\n    <div id=\"app\">\n      <nav class=\"navbar navbar-dark bg-primary\">\n        <button *ngIf=\"!isLoggedIn\" class=\"btn btn-primary btn-lg btn-block\" href=\"/login\" routerLink=\"login\">Login</button>\n        <button *ngIf=\"isLoggedIn\" class=\"btn btn-primary btn-lg btn-block\" href (click)=\"logout()\">Log Out</button>\n        <button *ngIf=\"!isLoggedIn\" class=\"btn btn-primary btn-lg btn-block\" href=\"/register\" routerLink=\"register\">Register</button>\n      </nav>\n    \n      <div class=\"container\">\n        <router-outlet></router-outlet>\n      </div>\n    </div>\n  </body>\n</html>\n","import { relativeToRootDirs } from '@angular/compiler-cli/src/transformers/util';\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TokenStorageService } from './_services/token-storage.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  isLoggedIn = false;\n\n  constructor(\n    private tokenStorageService: TokenStorageService,\n    private router: Router) { }\n\n  ngOnInit(): void {\n    this.isLoggedIn = !!this.tokenStorageService.getToken();\n\n    if(this.isLoggedIn) {\n      this.router.navigate(['converter']);\n    } else {\n      this.router.navigate['login'];\n    }\n  }\n\n  logout(): void {\n    this.tokenStorageService.signOut();\n    window.location.reload();\n  }\n}\n","<html>\n<head>\n  <title>Currency Converter</title>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <!-- Bootstrap CSS -->\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n  <!-- Javascript -->\n  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\n  <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script>\n\n<style>\n  \n.panel {\nbackground: #333335;\nborder: solid white;\n}\n\n.results {\nfont-size: 1em;\ncolor: #FFFFFF;\ntext-align-last: center;\n}\n\ninput {\n   text-align: center;\n}\n\nselect { \n  text-align-last: center;\n}\n\n</style>\n\n</head>\n\n<body>\n\n<div style=\"padding: 0;\" class=\"container\" *ngIf=\"isLoggedIn\">\n  <div class=\"col-md-6 col-md-offset-3\">\n    <div class=\"panel panel-primary text-center\">\n      <div class=\"panel-heading\">\n        <h4 class=\"panel-title\">Currency Converter</h4>\n      </div>\n      <div class=\"panel-body\">\n        <form #currencyForm=\"ngForm\" (ngSubmit)=\"checkMode(currencyForm)\" role=\"form\" *ngFor=\"let allCurrency of allCurrency$\" class=\"form-vertical\">\n\n          <div class=\"form-group\">\n            <input type=\"number\" ngModel name=\"quantity\" class=\"amount form-control\" placeholder=\"Enter amount\" min=\"0.01\" step=\"0.01\" oninput=\"validity.valid||(value='');\">\n          </div>\n\n          <div class=\"form-group\">\n            <div>\n              <mat-button-toggle-group class=\"btn-group\" value=\"from PLN\" #toggleGroup=\"matButtonToggleGroup\">\n                <mat-button-toggle class=\"btn btn-primary btn-lg btn-block\" value=\"from PLN\">From PLN</mat-button-toggle>\n                <mat-button-toggle class=\"btn btn-primary btn-lg btn-block\" value=\"to PLN\">To PLN</mat-button-toggle>\n              </mat-button-toggle-group>\n            </div>\n            <div>\n              <label id=\"toggleButton\" class=\"results\">Mode {{toggleGroup.value}}</label>\n            </div>\n            <label id=\"results\" class=\"results\">Select currency</label>\n            <select ngModel name=\"code\" class=\"form-control\">\n              <option value=\"\" [disabled]=\"true\">-- Select currency --</option>\n              <option *ngFor=\"let rate of allCurrency.rates\">{{ rate.code }}</option>\n            </select>\n          </div>\n          <div class=\"form-group\">\n            <button type=\"submit\" class=\"btn btn-primary\">Convert</button>\n          </div>\n        </form>\n        <p id=\"result\" class=\"results\"></p>\n      </div>\n      <button id=\"showBtn\" (click)=\"showTable()\" class=\"btn btn-primary\">Show/Hide table</button>\n      <div *ngIf=\"show\">\n        <table class=\"table\">\n          <thead>\n            <tr class=\"results\" >\n              <th scope=\"col\">Currency</th>\n              <th scope=\"col\">Rate</th>\n              <th scope=\"col\">Effective Date</th>\n            </tr>\n          </thead>\n          <tbody *ngFor=\"let allCurrency of allCurrency$\" class=\"results\">\n            <tr *ngFor=\"let rate of allCurrency.rates\">\n              <td>{{ rate.code }} - {{ rate.currency }}</td>\n              <td>1 {{ rate.code }} = {{ rate.mid }} PLN</td>\n              <td>{{ allCurrency.effectiveDate }}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  </div>\n</div>\n</body>\n</html>","import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, NgForm } from '@angular/forms';\nimport { AllCurrency, Rate } from './allCurrency';\nimport { Currency } from './currency';\nimport { CurrencyService } from './currency.service';\nimport { Router } from '@angular/router';\nimport { TokenStorageService } from '../_services/token-storage.service';\n\n@Component({\n  selector: 'app-root-converter',\n  templateUrl: './converter.component.html',\n  styleUrls: ['./converter.component.css']\n})\n\nexport class ConverterComponent implements OnInit {\n  public allCurrency$: AllCurrency[];\n  public currency$: Currency;\n\n  public show: boolean = false;\n  public showBtn: any = 'Show';\n\n  isLoggedIn = false;\n\n  value: string;\n\n  constructor(private currencyService: CurrencyService,\n    private tokenStorage: TokenStorageService,\n    private router: Router) {}\n\n  ngOnInit() {\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn = true;\n      this.getAllCurrency();\n    }\n  }\n\n  showTable() {\n    this.show = !this.show;\n\n    if(this.show)  \n      this.showBtn = \"Hide\";\n    else\n      this.showBtn = \"Show\";\n  }\n\n  public checkMode(currencyForm: FormGroup) {\n\n    this.value = document.getElementById('toggleButton').textContent;\n\n    if(this.value === \"Mode to PLN\") {\n      this.toPln(currencyForm)\n    } else {\n      this.fromPln(currencyForm)\n    }\n  }\n\n  public getAllCurrency(): void {\n    this.currencyService.getAllCurrency().subscribe(\n      (response: AllCurrency[]) => {\n        this.allCurrency$ = response;\n      },\n      (error: HttpErrorResponse) => {\n        alert(error.message);\n      }\n    )\n  }\n\n  public toPln(currencyForm: FormGroup) {\n     this.currencyService.getValueToPln(currencyForm.value.code, currencyForm.value.quantity).subscribe(\n       (response: Currency) => {\n         this.currency$ = response;\n         document.getElementById('result').textContent = this.currency$.result + \" PLN\"; \n       }\n     )\n  }\n\n  public fromPln(currencyForm: FormGroup) {\n    this.currencyService.getValueFromPln(currencyForm.value.code, currencyForm.value.quantity).subscribe(\n      (response: Currency) => {\n        this.currency$ = response;\n        document.getElementById('result').textContent = this.currency$.result + \" \" + this.currency$.code; \n      }\n    )\n }\n}","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CurrencyService } from './converter/currency.service';\nimport {MatTableModule} from '@angular/material/table';\nimport { LoginComponent } from './login/login.component';\nimport { ConverterComponent } from './converter/converter.component'\nimport { authInterceptorProviders } from './_helpers/auth.interceptor';\nimport { RegisterComponent } from './register/register.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    ConverterComponent,\n    RegisterComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule,\n    MatButtonToggleModule,\n    MatTableModule\n  ],\n  providers: [CurrencyService, authInterceptorProviders],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { HTTP_INTERCEPTORS, HttpEvent } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\n\nimport { TokenStorageService } from '../_services/token-storage.service';\nimport { Observable } from 'rxjs';\n\nconst TOKEN_HEADER_KEY = 'Authorization';       \n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private token: TokenStorageService) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    let authReq = req;\n    const token = this.token.getToken();\n    if (token != null) {\n      authReq = req.clone({ headers: req.headers.set(TOKEN_HEADER_KEY, 'Bearer ' + token) });\n    }\n    return next.handle(authReq);\n  }\n}\n\nexport const authInterceptorProviders = [\n  { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }\n];\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component'\nimport { ConverterComponent } from './converter/converter.component'\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'converter', component: ConverterComponent },\n  { path: '', redirectTo: 'login', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","<html>\n  <head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <!-- Bootstrap CSS -->\n  <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n  <!-- Javascript -->\n  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\n  <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script>\n  </head>\n  <body>\n    <div class=\"col-md-12\">\n      <div class=\"card card-container\">\n        <form\n          *ngIf=\"!isLoggedIn\"\n          name=\"form\"\n          (ngSubmit)=\"f.form.valid && onSubmit()\"\n          #f=\"ngForm\"\n          novalidate\n        >\n          <div class=\"form-group\">\n            <label for=\"username\">Email</label>\n            <input\n              type=\"text\"\n              class=\"form-control\"\n              name=\"username\"\n              [(ngModel)]=\"form.email\"\n              required\n              #username=\"ngModel\"\n            />\n            <div\n              class=\"alert alert-danger\"\n              role=\"alert\"\n              *ngIf=\"username.errors && f.submitted\"\n            >\n              Email is required!\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"password\">Password</label>\n            <input\n              type=\"password\"\n              class=\"form-control\"\n              name=\"password\"\n              [(ngModel)]=\"form.password\"\n              required\n              minlength=\"4\"\n              #password=\"ngModel\"\n            />\n            <div\n              class=\"alert alert-danger\"\n              role=\"alert\"\n              *ngIf=\"password.errors && f.submitted\"\n            >\n              <div *ngIf=\"password.errors.required\">Password is required</div>\n              <div *ngIf=\"password.errors.minlength\">\n                Password must be at least 4 characters\n              </div>\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <button class=\"btn btn-primary btn-block\">\n              Login\n            </button>\n          </div>\n          <div class=\"form-group\">\n            <div\n              class=\"alert alert-danger\"\n              role=\"alert\"\n              *ngIf=\"f.submitted && isLoginFailed\"\n            >\n              Login failed: Wrong Username or Password\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n    \n  </body>\n</html>","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../_services/auth.service';\nimport { TokenStorageService } from '../_services/token-storage.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  form: any = {\n    username: null,\n    password: null\n  };\n  isLoggedIn = false;\n  isLoginFailed = false;\n  errorMessage = '';\n  header = '';\n\n  constructor(private authService: AuthService, private tokenStorage: TokenStorageService) { }\n\n  ngOnInit(): void {\n    if (this.tokenStorage.getToken()) {\n      this.isLoggedIn = true;\n    }\n  }\n\n  onSubmit(): void {\n    const { email, password } = this.form;\n\n    this.authService.login(email, password).subscribe(\n    resp => {\n        this.header = resp.headers.get('Authorization');\n        console.log(this.header);\n        this.tokenStorage.saveToken(this.header);\n        this.isLoginFailed = false;\n        this.isLoggedIn = true;\n        this.reloadPage();\n      },\n      err => {\n        this.isLoginFailed = true;\n      }\n    );\n  }\n\n  reloadPage(): void {\n    window.location.reload();\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}